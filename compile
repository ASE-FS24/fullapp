#!/bin/bash

#Args
BRANCH=${1:-main}

#Variables - Color
RED="\033[1;31m"
GREEN="\033[1;32m"
NOCOLOR="\033[0m"

echo

echo -e "Step 1: ${GREEN}checking dependencies${NOCOLOR}"

# List of executables to check
executables=("docker" "mvn" "git")

# Checks if every executable is installed
for cmd in "${executables[@]}"; do
    if ! command -v "$cmd" &> /dev/null; then
        echo "$cmd could not be found"
        exit 1
    fi
done

echo "All executables are installed"

echo

echo -e "Step 2: ${GREEN}cloning repositories${NOCOLOR}"

repos=("https://github.com/ASE-FS24/user-manager" "https://github.com/ASE-FS24/post-manager" "https://github.com/ASE-FS24/frontend" "https://github.com/ASE-FS24/chat-manager")

for repo in "${repos[@]}"; do
    echo "Cloning repository: $repo"
    
    # If BRANCH is not provided, ask the user for the branch name
    if [[ -z $BRANCH ]]; then
        echo "Branch not provided for $repo. Please enter the branch name:"
        read branch_name
    else
        branch_name=$BRANCH
    fi
    
    # Check if the branch exists
    if git ls-remote --exit-code --heads "$repo" "$branch_name" >/dev/null 2>&1; then
        git clone -b "$branch_name" "$repo"
    else
        echo "Branch '$branch_name' not found in repository '$repo'."
        echo "Please enter a valid branch name:"
        read branch_name
        # Retry cloning with the new branch name
        git clone -b "$branch_name" "$repo"
    fi
done

echo "All repositories cloned"

echo 

echo -e "Step 3: ${GREEN}compiling user-manager${NOCOLOR}"

cd user-manager
mvn -B package -DfinalName=usermanager -DskipTests --file pom.xml

cd ..

echo "Compiled user-manager"

echo

echo -e "Step 4: ${GREEN}compiling post-manager${NOCOLOR}"

cd post-manager
mvn -B package -DfinalName=postmanager -DskipTests --file pom.xml
cd ..

echo "Compiled post-manager"

echo

echo -e "Step 4: ${GREEN}compiling chat-manager${NOCOLOR}"

cd chat-manager
mvn -B package -DfinalName=chatmanager -DskipTests --file pom.xml
cd ..

echo "Compiled chat-manager"

echo -e "Step 5: ${GREEN}copying scripts${NOCOLOR}"

mkdir scripts

find frontend/ -maxdepth 1 -name '*.sh' -exec sh -c 'cp "$1" scripts/frontend-"$(basename "$1")"' _ {} \;
find user-manager/ -maxdepth 1 -name '*.sh' -exec sh -c 'cp "$1" scripts/user-manager-"$(basename "$1")"' _ {} \;
find post-manager/ -maxdepth 1 -name '*.sh' -exec sh -c 'cp "$1" scripts/post-manager-"$(basename "$1")"' _ {} \;
find chat-manager/ -maxdepth 1 -name '*.sh' -exec sh -c 'cp "$1" scripts/chat-manager-"$(basename "$1")"' _ {} \;

chmod +x scripts/*.sh 

echo 

echo -e "${GREEN}Done.${NOCOLOR} You can now run the docker-compose file to start the application."